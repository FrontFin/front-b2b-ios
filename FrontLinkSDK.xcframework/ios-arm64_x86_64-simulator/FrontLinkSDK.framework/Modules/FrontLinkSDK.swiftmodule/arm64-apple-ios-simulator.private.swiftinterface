// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FrontLinkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CryptoKit
import Foundation
@_exported import FrontLinkSDK
import MessageUI
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension UIKit.UIImage {
  public static let infoGray: UIKit.UIImage
  public func resize(with size: CoreFoundation.CGSize, contentMode: UIKit.UIView.ContentMode = .scaleAspectFill) -> UIKit.UIImage
}
public enum GetFrontLinkSDK {
  public static var catalogLink: Swift.String?
  public static var defaultBrokersManager: FrontLinkSDK.AddBrokersManaging
  public static func setup(catalogLink: Swift.String? = nil)
  public static func connectBrokers(in viewController: UIKit.UIViewController, brokersManager: FrontLinkSDK.AddBrokersManaging? = nil)
}
public enum BrokerAuthenticationStatus : Swift.String, Swift.Codable {
  case succeeded
  case challengeIssued
  case mfaRequired
  case failed
  case notAuthorized
  case badRequest
  case delayed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BrokerAuthentication : Swift.Encodable, Swift.Hashable {
  public let authToken: Swift.String
  public let type: Swift.String
  public init(authToken: Swift.String, type: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FrontLinkSDK.BrokerAuthentication, b: FrontLinkSDK.BrokerAuthentication) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension Foundation.NSNotification.Name {
  public static let selectAssetToTrade: Foundation.Notification.Name
  public static let brokerListUpdated: Foundation.Notification.Name
  public static let showLoader: Foundation.Notification.Name
}
public struct BrandInfo : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FrontLoadingView : SwiftUI.UIViewRepresentable {
  public init()
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<FrontLinkSDK.FrontLoadingView>) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: SwiftUI.UIViewRepresentableContext<FrontLinkSDK.FrontLoadingView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public protocol BrokerAccountable : AnyObject, Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get }
  var accessToken: Swift.String? { get set }
  var accountId: Swift.String? { get set }
  var accountName: Swift.String? { get set }
  var accessTokenUpdatedAt: Foundation.Date? { get set }
  var brokerType: Swift.String { get set }
  var refreshToken: Swift.String? { get set }
  var brokerName: Swift.String? { get set }
  var expiresInSeconds: Swift.Double? { get set }
  var refreshTokenExpiresInSeconds: Swift.Int? { get set }
  var brokerLogoBase64: Swift.String? { get set }
  var colorHEX: Swift.String? { get set }
  var brokerBrandInfo: FrontLinkSDK.BrandInfo? { get set }
  var status: FrontLinkSDK.BrokerAuthenticationStatus { get set }
  var authentication: FrontLinkSDK.BrokerAuthentication { get }
  var refreshTokenUpdatedAt: Foundation.Date? { get set }
  var needToRefreshToken: Swift.Bool { get }
  func update(broker: FrontLinkSDK.BrokerAccountable)
}
extension FrontLinkSDK.BrokerAccountable {
  public var authentication: FrontLinkSDK.BrokerAuthentication {
    get
  }
  public var icon: UIKit.UIImage? {
    get
  }
  public var needToRefreshToken: Swift.Bool {
    get
  }
}
public protocol AddBrokersManaging {
  var brokers: [FrontLinkSDK.BrokerAccountable] { get }
  func add(brokers: [FrontLinkSDK.BrokerAccountable])
  func add(broker: FrontLinkSDK.BrokerAccountable)
  func saveBrokers()
}
extension FrontLinkSDK.BrokerAuthenticationStatus : Swift.Equatable {}
extension FrontLinkSDK.BrokerAuthenticationStatus : Swift.Hashable {}
extension FrontLinkSDK.BrokerAuthenticationStatus : Swift.RawRepresentable {}
